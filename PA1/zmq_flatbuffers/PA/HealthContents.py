# automatically generated by the FlatBuffers compiler, do not modify

# namespace: PA

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class HealthContents(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = HealthContents()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsHealthContents(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # HealthContents
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # HealthContents
    def Dispenser(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # HealthContents
    def Icemaker(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # HealthContents
    def Lightbulb(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # HealthContents
    def FridgeTemp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # HealthContents
    def FreezerTemp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # HealthContents
    def SensorStatus(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def HealthContentsStart(builder):
    builder.StartObject(6)

def Start(builder):
    HealthContentsStart(builder)

def HealthContentsAddDispenser(builder, dispenser):
    builder.PrependInt32Slot(0, dispenser, 0)

def AddDispenser(builder, dispenser):
    HealthContentsAddDispenser(builder, dispenser)

def HealthContentsAddIcemaker(builder, icemaker):
    builder.PrependInt32Slot(1, icemaker, 0)

def AddIcemaker(builder, icemaker):
    HealthContentsAddIcemaker(builder, icemaker)

def HealthContentsAddLightbulb(builder, lightbulb):
    builder.PrependInt32Slot(2, lightbulb, 0)

def AddLightbulb(builder, lightbulb):
    HealthContentsAddLightbulb(builder, lightbulb)

def HealthContentsAddFridgeTemp(builder, fridgeTemp):
    builder.PrependInt32Slot(3, fridgeTemp, 0)

def AddFridgeTemp(builder, fridgeTemp):
    HealthContentsAddFridgeTemp(builder, fridgeTemp)

def HealthContentsAddFreezerTemp(builder, freezerTemp):
    builder.PrependInt32Slot(4, freezerTemp, 0)

def AddFreezerTemp(builder, freezerTemp):
    HealthContentsAddFreezerTemp(builder, freezerTemp)

def HealthContentsAddSensorStatus(builder, sensorStatus):
    builder.PrependInt32Slot(5, sensorStatus, 0)

def AddSensorStatus(builder, sensorStatus):
    HealthContentsAddSensorStatus(builder, sensorStatus)

def HealthContentsEnd(builder):
    return builder.EndObject()

def End(builder):
    return HealthContentsEnd(builder)
